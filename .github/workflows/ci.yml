name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  lint_and_test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [backend, frontend]
    name: Lint & Test (${{ matrix.service }}) # Corrected variable access
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python for backend
        if: matrix.service == 'backend'
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install backend dependencies & Run tests
        if: matrix.service == 'backend'
        run: |
          cd packages/backend
          pip install --upgrade pip
          pip install -r requirements.txt
          # run your backend tests here, e.g. pytest
          # pytest
          echo "Backend tests would run here"

      - name: Set up Node.js for frontend
        if: matrix.service == 'frontend'
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'pnpm' # Added pnpm caching
          cache-dependency-path: packages/frontend/pnpm-lock.yaml

      - name: Install frontend dependencies & Run tests
        if: matrix.service == 'frontend'
        run: |
          cd packages/frontend
          npm install -g pnpm
          pnpm install --frozen-lockfile # Added --frozen-lockfile
          # run your frontend tests here, e.g. pnpm test
          # pnpm test
          echo "Frontend tests would run here"

  build_and_push:
    needs: lint_and_test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' # Ensure it only runs on merge to main
    env:
      REGISTRY: ghcr.io/${{ github.repository_owner }} # Corrected to use github.repository_owner
      IMAGE_NAME_BACKEND: backend
      IMAGE_NAME_FRONTEND: frontend

    permissions: # Needed for pushing to GHCR
        contents: read
        packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta_backend
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}
          tags: |
            type=sha,prefix=,suffix=,format=short
            type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', 'main') }}

      - name: Build & push backend image
        uses: docker/build-push-action@v4
        with:
          context: . # Build context is repo root
          dockerfile: packages/backend/Dockerfile
          push: true
          tags: ${{ steps.meta_backend.outputs.tags }}
          labels: ${{ steps.meta_backend.outputs.labels }}
          # No build-args needed for backend currently

      - name: Extract metadata (tags, labels) for Docker - Frontend
        id: meta_frontend
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}
          tags: |
            type=sha,prefix=,suffix=,format=short
            type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', 'main') }}

      - name: Build & push frontend image
        uses: docker/build-push-action@v4
        with:
          context: . # Build context is repo root
          dockerfile: packages/frontend/Dockerfile
          push: true
          build-args: |
            VITE_API_BASE_URL=${{ vars.VITE_API_BASE_URL_PROD || 'https://api.yourdomain.com' }} # Use repo/org variable or default
          tags: ${{ steps.meta_frontend.outputs.tags }}
          labels: ${{ steps.meta_frontend.outputs.labels }}
